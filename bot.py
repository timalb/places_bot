import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from config import load_config
from database import Database
from geocoder import Geocoder
import os
import folium
from folium import plugins
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
from PIL import Image
import aiohttp

logging.basicConfig(level=logging.INFO)

config = load_config()
bot = Bot(token=config["tg_bot"]["token"])
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database()
geocoder = Geocoder()

class UserState(StatesGroup):
    waiting_for_city = State()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        await db.add_user(message.from_user.id)
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç –Ω–∞ –∫–∞—Ä—Ç–µ. "
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:"
        )
        await state.set_state(UserState.waiting_for_city)
    except Exception as e:
        logging.error(f"Error in start command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(UserState.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    try:
        city = message.text
        await db.set_user_city(message.from_user.id, city)
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}")
        await state.clear()
    except Exception as e:
        logging.error(f"Error processing city: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /places - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç
    /map - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
    
    –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ - –∞–¥—Ä–µ—Å
    –ù–∞–ø—Ä–∏–º–µ—Ä: "–ö–æ—Ñ–µ–π–Ω—è –£ –ü–µ—Ç—Ä–∞ - —É–ª. –õ–µ–Ω–∏–Ω–∞, 1"
    """
    await message.answer(help_text)

@dp.message(Command("places"))
async def cmd_places(message: types.Message):
    try:
        places = await db.get_user_places(message.from_user.id)
        if not places:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç")
            return
        
        places_text = "–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:\n\n"
        for place_name, address in places:
            places_text += f"üìç {place_name}\nüè† {address}\n\n"
        
        await message.answer(places_text)
    except Exception as e:
        logging.error(f"Error getting places: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç")

@dp.message(Command("map"))
async def cmd_map(message: types.Message):
    try:
        places = await db.get_user_places_with_coords(message.from_user.id)
        if not places:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç")
            return

        # –°–æ–∑–¥–∞–µ–º HTML –∫–∞—Ä—Ç—É –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        m = folium.Map(location=[55.7558, 37.6173], zoom_start=12)
        bounds = []

        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –º–µ—Å—Ç–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ
        await message.answer("–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:")
        
        for place_name, address, lat, lon in places:
            if lat and lon:
                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ HTML –∫–∞—Ä—Ç—É
                folium.Marker(
                    location=[lat, lon],
                    popup=f"<b>{place_name}</b><br>{address}",
                    icon=folium.Icon(color='red', icon='info-sign')
                ).add_to(m)
                bounds.append([lat, lon])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ —á–µ—Ä–µ–∑ Telegram
                await message.answer_venue(
                    latitude=lat,
                    longitude=lon,
                    title=place_name,
                    address=address
                )

        if bounds:
            m.fit_bounds(bounds)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML –≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        os.makedirs('data/temp', exist_ok=True)
        map_file = f"data/temp/map_{message.from_user.id}.html"
        m.save(map_file)
        
        await message.answer_document(
            document=types.FSInputFile(map_file),
            caption="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–∞—Ä—Ç—ã (HTML) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(map_file)

    except Exception as e:
        logging.error(f"Error generating map: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã")

@dp.message(F.text)
async def process_place(message: types.Message, state: FSMContext):
    try:
        text = message.text
        if '-' not in text:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ - –∞–¥—Ä–µ—Å'")
            return

        place_name, address = text.split('-', 1)
        place_name = place_name.strip()
        address = address.strip()

        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_city = await db.get_user_city(message.from_user.id)
        if not user_city:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start")
            return

        full_address = f"{address}, {user_city}"
        coordinates = await geocoder.geocode(full_address)
        
        if coordinates:
            latitude, longitude = coordinates
            await db.add_place(
                user_id=message.from_user.id,
                place_name=place_name,
                address=full_address,
                latitude=latitude,
                longitude=longitude
            )
            await message.answer(
                f"–ú–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n"
                f"üìç {place_name}\n"
                f"üè† {full_address}"
            )
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
    except Exception as e:
        logging.error(f"Error processing place: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Å—Ç–∞")

async def main():
    await db.init()
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"Error starting bot: {e}")
        raise
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main()) 